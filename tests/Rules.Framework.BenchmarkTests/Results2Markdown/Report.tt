<#@ template language="C#" #>
<#@ output extension=".md" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ parameter name="ResultsFile" type="string" #>
<#
    using var streamReader = File.OpenText(ResultsFile);
    var rawJsonText = streamReader.ReadToEnd();
    dynamic results = JsonConvert.DeserializeObject(rawJsonText);
    dynamic hostEnvInfo = results.Environment;
#>
# Benchmark Results Report

Date & Time: <#= results.Date.ToString("yyyy-MM-dd HH:mm:ss") #>

## Environment

><#= hostEnvInfo.BenchmarkDotNetCaption #> Version=<#= hostEnvInfo.BenchmarkDotNetVersion #>
>
>Processor=<#= hostEnvInfo.ProcessorName #>, <#= hostEnvInfo.PhysicalCoreCount #> physical cores, <#= hostEnvInfo.LogicalCoreCount #> logical cores
>
>Architecture=<#= hostEnvInfo.Architecture #>, Runtime=<#= hostEnvInfo.DotNetRuntimeVersion #>, Configuration=<#= hostEnvInfo.BuildConfiguration #>
>
>.NET CLI Version=<#= hostEnvInfo.DotNetCliVersion #>

## Statistics

| Name | Parameters | Mean Time Taken | Std Error | Branch<br/>Instructions/Op | Branch<br/>Mispredictions/Op | GC Gen0 | Allocated Memory |
| ---- | ---------- | --------------- | --------- | -------------------------- | ---------------------------- | ------- | ---------------- |
<# foreach (dynamic statisticsItem in results.Statistics)
{
    var name = statisticsItem.Key;
    var parameters = statisticsItem.Parameters;
    var mean = $"{statisticsItem.MeanTimeTaken.Value.ToString((string)statisticsItem.MeanTimeTaken.Format)} {statisticsItem.MeanTimeTaken.Unit}";
    var stdError = $"{statisticsItem.StandardError.Value.ToString((string)statisticsItem.StandardError.Format)} {statisticsItem.StandardError.Unit}";
    var branchInstructionsPerOp = statisticsItem.BranchInstructionsPerOp.Value.ToString((string)statisticsItem.BranchInstructionsPerOp.Format);
    var branchMispredictionsPerOp = statisticsItem.BranchMispredictionsPerOp.Value.ToString((string)statisticsItem.BranchMispredictionsPerOp.Format);
    var gen0Collects = statisticsItem.Gen0Collects.Value.ToString((string)statisticsItem.Gen0Collects.Format);
    var allocatedMemory = $"{statisticsItem.AllocatedMemory.Value.ToString((string)statisticsItem.AllocatedMemory.Format)} {statisticsItem.AllocatedMemory.Unit}";
#>
| <#= name #> | <#= parameters #> | <#= mean #> | <#= stdError #> | <#= branchInstructionsPerOp #> | <#= branchMispredictionsPerOp #> | <#= gen0Collects #> | <#= allocatedMemory #> |
<#} #>

## Statistics Comparison

| Name | Baseline | Compare | Mean Time Taken<br/>[Baseline] | Mean Time Taken<br/>[Compare] | Mean Time Taken<br/>[Comparison %] | Allocated Memory<br/>[Baseline] | Allocated Memory<br/>[Compare] | Allocated Memory<br/>[Comparison %] |
| ---- | -------- | ------- | ------------------------------ | ----------------------------- | ---------------------------------- | ------------------------------- | ------------------------------ | ----------------------------------- |
<#
foreach (dynamic statisticsComparisonItem in results.StatisticsComparison)
{
    var name = statisticsComparisonItem.Key;
    var baselineParameters = statisticsComparisonItem.BaselineParameters;
    var compareToParameters = statisticsComparisonItem.CompareParameters;
    var baselineMean = $"{statisticsComparisonItem.BaselineMeanTimeTaken.Value.ToString((string)statisticsComparisonItem.BaselineMeanTimeTaken.Format)} {statisticsComparisonItem.BaselineMeanTimeTaken.Unit}";
    var compareToMean = $"{statisticsComparisonItem.CompareMeanTimeTaken.Value.ToString((string)statisticsComparisonItem.CompareMeanTimeTaken.Format)} {statisticsComparisonItem.CompareMeanTimeTaken.Unit}";
    var meanCompareRate = $"{statisticsComparisonItem.MeanTimeTakenCompareRate.Value.ToString((string)statisticsComparisonItem.MeanTimeTakenCompareRate.Format)} {statisticsComparisonItem.MeanTimeTakenCompareRate.Unit}";
    var baselineAllocatedMemory = $"{statisticsComparisonItem.BaselineAllocatedMemory.Value.ToString((string)statisticsComparisonItem.BaselineAllocatedMemory.Format)} {statisticsComparisonItem.BaselineAllocatedMemory.Unit}";
    var compareToAllocatedMemory = $"{statisticsComparisonItem.CompareAllocatedMemory.Value.ToString((string)statisticsComparisonItem.CompareAllocatedMemory.Format)} {statisticsComparisonItem.CompareAllocatedMemory.Unit}";
    var allocatedMemoryCompareRate = $"{statisticsComparisonItem.AllocatedMemoryRate.Value.ToString((string)statisticsComparisonItem.AllocatedMemoryRate.Format)} {statisticsComparisonItem.AllocatedMemoryRate.Unit}";
#>
| <#= name #> | <#= baselineParameters #> | <#= compareToParameters #> | <#= baselineMean #> | <#= compareToMean #> | <#= meanCompareRate #> | <#= baselineAllocatedMemory #> | <#= compareToAllocatedMemory #> | <#= allocatedMemoryCompareRate #> |
<#
}
#>