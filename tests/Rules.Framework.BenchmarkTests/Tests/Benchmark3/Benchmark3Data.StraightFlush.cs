namespace Rules.Framework.BenchmarkTests.Tests.Benchmark3
{
    using Rules.Framework.Builder;
    using Rules.Framework.Core;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    internal partial class Benchmark3Data
    {
        private IEnumerable<Rule<ContentTypes, ConditionTypes>> GetStraightFlushRules()
        {
            return new[]
            {
                // Straight flush of Clubs:
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: 6, 5, 4, 3, 2")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.DeuceOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: 7, 6, 5, 4, 3")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: 8, 7, 6, 5, 4")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: 9, 8, 7, 6, 5")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: 10, 9, 8, 7, 6")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: Jack, 10, 9, 8, 7")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: Queen, Jack, 10, 9, 8")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Clubs: King, Queen, Jack, 10, 9")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.KingOfClubs)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,

                // Straight flush of diamonds
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: 6, 5, 4, 3, 2")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.DeuceOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: 7, 6, 5, 4, 3")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: 8, 7, 6, 5, 4")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: 9, 8, 7, 6, 5")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: 10, 9, 8, 7, 6")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: Jack, 10, 9, 8, 7")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: Queen, Jack, 10, 9, 8")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Diamonds: King, Queen, Jack, 10, 9")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.KingOfDiamonds)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,

                // Straight flush of hearts
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: 6, 5, 4, 3, 2")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.DeuceOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: 7, 6, 5, 4, 3")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: 8, 7, 6, 5, 4")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: 9, 8, 7, 6, 5")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: 10, 9, 8, 7, 6")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: Jack, 10, 9, 8, 7")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: Queen, Jack, 10, 9, 8")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Hearts: King, Queen, Jack, 10, 9")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.KingOfHearts)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,

                // Straight flush of spades
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: 6, 5, 4, 3, 2")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.DeuceOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: 7, 6, 5, 4, 3")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TreyOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: 8, 7, 6, 5, 4")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FourOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: 9, 8, 7, 6, 5")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.FiveOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: 10, 9, 8, 7, 6")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SixOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: Jack, 10, 9, 8, 7")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.SevenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: Queen, Jack, 10, 9, 8")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.EightOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
                RuleBuilder.NewRule<ContentTypes, ConditionTypes>()
                    .WithName("Benchmark 3 - Straight flush of Spades: King, Queen, Jack, 10, 9")
                    .WithDateBegin(DateTime.Parse("2000-01-01"))
                    .WithContent(ContentTypes.TexasHoldemPokerSingleCombinations, new SingleCombinationPokerScore { Combination = "Straight Flush" })
                    .WithCondition(x =>
                        x.AsComposed()
                            .WithLogicalOperator(LogicalOperators.And)
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.NineOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.TenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.JackOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.QueenOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .AddCondition(c =>
                                c.AsValued(ConditionTypes.KingOfSpades)
                                    .OfDataType<bool>()
                                    .WithComparisonOperator(Operators.Equal)
                                    .SetOperand(true)
                                    .Build()
                            )
                            .Build()
                        )
                    .Build().Rule,
            };
        }
    }
}
