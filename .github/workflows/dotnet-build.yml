name: .NET build
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Git Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
        dotnet-quality: ga
    - name: Setup Report Generator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: MongoDB in GitHub Actions
      uses: supercharge/mongodb-github-action@1.9.0
      with:
        mongodb-version: '4.4'
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore -c Release
    # Generate code coverage reports, which are recovered by Codacy afterwards.
    - name: Test
      run: dotnet test --no-build --verbosity normal -m:1 -c Release --collect:"XPlat Code Coverage" --results-directory:"../../coverage-outputs"
    - name: Merge coverage results
      run: |
        reportgenerator -reports:"../../coverage-outputs/**/*.xml" -targetdir:"../../coverage-outputs" -reporttypes:Cobertura
        rm -rfv ../../coverage-outputs/*/
        ls -la ../../coverage-outputs

  benchmarks:
    runs-on: ubuntu-latest
    steps:
    - name: Determine folders
      id: determine-folders
      run: |
        HEAD_FOLDER=$(pwd)
        HEAD_BENCH_FOLDER=$HEAD_FOLDER/tmp/benchmarks/head
        echo "head_folder=$HEAD_FOLDER" >> $GITHUB_OUTPUT
        echo "head_benchmarks_folder=$HEAD_BENCH_FOLDER" >> $GITHUB_OUTPUT
    - name: Git Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
    - name: Create benchmarks results folder (HEAD)
      run: mkdir -p ${{ steps.determine-folders.outputs.head_benchmarks_folder }}
    - name: Restore dependencies (HEAD)
      run: dotnet restore rules-framework.sln
    - name: Build benchmarks (HEAD)
      run: dotnet build -c Release tests/Rules.Framework.BenchmarkTests/Rules.Framework.BenchmarkTests.csproj --framework net6.0
    - name: Run benchmarks (HEAD)
      run: sudo dotnet run --project tests/Rules.Framework.BenchmarkTests/Rules.Framework.BenchmarkTests.csproj -c Release --framework net6.0 -- -a "${{ steps.determine-folders.outputs.head_benchmarks_folder }}/artifacts"
    - name: Determine results file (HEAD)
      id: determine-results-file
      run: |
        cd ${{ steps.determine-folders.outputs.head_benchmarks_folder }}
        ls -lRA
        sudo chmod -R 777 artifacts
        MD_FILE=$(find artifacts/results -name '*.md')
        echo "file=${{ steps.determine-folders.outputs.head_benchmarks_folder }}/$MD_FILE" >> $GITHUB_OUTPUT
      # Tries to find a comment ID.
    - name: Find comment - report results
      uses: peter-evans/find-comment@v2
      id: find-comment
      with:
        issue-number: ${{ github.event.number }}
        comment-author: 'github-actions[bot]'
        body-includes: Benchmark Results Report
      # If a prior comment ID is not found, creates a new comment, otherwise updates the existent one.
    - name: Create or update comment - report results
      uses: peter-evans/create-or-update-comment@v2
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        issue-number: ${{ github.event.number }}
        body-file: ${{ steps.determine-results-file.outputs.file }}
        edit-mode: replace