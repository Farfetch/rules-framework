name: .NET build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - name: Determine Git Checkout information
      id: checkout-info
      run: |
        if [ $GITHUB_EVENT_NAME == 'pull_request' ]; then
          BRANCH_NAME=$(echo ${{ github.event.pull_request.head.ref }})
          REPOSITORY_NAME=$(echo ${{ github.event.pull_request.head.repo.full_name }})
        else
          BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/})
          REPOSITORY_NAME=$(echo ${{ github.repository }})
        fi

        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "REPOSITORY_NAME=$REPOSITORY_NAME" >> $GITHUB_ENV
        echo "Git checkout information:"
        echo "Branch name: $BRANCH_NAME"
        echo "Repository name: $REPOSITORY_NAME"

    - name: Git Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - name: Force fetch tags
      run: |
        # get current repository tags
        git fetch --tags --force

        # deal with forked repositories
        git remote add upstream https://github.com/${{ github.repository }}
        git fetch --tags upstream

    - name: Find last tag
      id: prev-version-tag
      run: |
        last_tag=$(git tag -l "*[0-9].*[0-9].*[0-9]*" --sort "-version:refname" | head -n 1)
        echo "::set-output name=tag::$last_tag"

    - name: Find last commit message
      id: last-commit-message
      run: |
        last_commit_message=$(git log -1 --pretty=%s $BRANCH_NAME --)
        echo "Last commit message found:"
        echo " $last_commit_message"
        echo "LAST_COMMIT_MESSAGE=$last_commit_message" >> $GITHUB_ENV

    - name: Bump next build version options
      id: semvers
      uses: "WyriHaximus/github-action-next-semvers@v1.0"
      with:
        version: ${{ steps.prev-version-tag.outputs.tag }}

    - name: Set next build version
      id: build-context
      env:
        MAJOR: ${{steps.semvers.outputs.major}}
        MINOR: ${{steps.semvers.outputs.minor}}
        PATCH: ${{steps.semvers.outputs.patch}}
        CURRENT: ${{steps.prev-version-tag.outputs.tag}}
      run: |
        echo "::set-output name=current-version::$CURRENT"

        if [[ $LAST_COMMIT_MESSAGE =~ ^major:.*$ ]]; then
          echo "Bumping to next major version."
          NEXT_VERSION="$MAJOR"
        elif [[ $LAST_COMMIT_MESSAGE =~ ^feat:.*$ ]]; then
          echo "Bumping to next minor version."
          NEXT_VERSION="$MINOR"
        elif [[ $LAST_COMMIT_MESSAGE =~ ^(fix|ci|refactor|chore):.*$ ]]; then
          echo "Bumping to next patch version."
          NEXT_VERSION="$PATCH"
        else
          echo "Skipping version bump."
          NEXT_VERSION="$CURRENT"
        fi

        if [[ $BRANCH_NAME = 'master' ]]; then
          echo '::set-output name=context::release'
        elif [[ $NEXT_VERSION != $CURRENT ]]; then
          NEXT_VERSION="$NEXT_VERSION-beta"
          echo '::set-output name=context::beta'
        else
          echo '::set-output name=context::beta'
        fi

        echo "::set-output name=next-version::$NEXT_VERSION"
        echo "Next version is: $NEXT_VERSION"
        echo "BUILD_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

    - name: Print build version
      run: echo "Build version will be $BUILD_VERSION"

    - name: Update project version
      uses: roryprimrose/set-vs-sdk-project-version@v1
      with:
        projectFilter: '*.csproj'
        version: ${{ env.BUILD_VERSION }}
        assemblyVersion: ${{ env.BUILD_VERSION }}
        fileVersion: ${{ env.BUILD_VERSION }}
        informationalVersion: ${{ env.BUILD_VERSION }}
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: | 
          3.1.x
          6.0.x

    - name: Setup Report Generator
      run: dotnet tool install --global dotnet-reportgenerator-globaltool
        
    - name: MongoDB in GitHub Actions
      uses: supercharge/mongodb-github-action@1.6.0
      with:
        mongodb-version: '4.4'

    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore -c Release
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory:"../../coverage-outputs" -m:1 -c Release
      
    - name: Merge coverage results
      run: |
        reportgenerator -reports:"../../coverage-outputs/**/*.xml" -targetdir:"../../coverage-outputs" -reporttypes:SonarQube
        rm -rfv ../../coverage-outputs/*/
        ls -la ../../coverage-outputs

    - name: Clean
      run: dotnet clean -c Release

    - name: Clear Nuget locals
      run: dotnet nuget locals all --clear

    - name: Delete build tag if exists
      uses: dev-drprasad/delete-tag-and-release@v0.2.0
      continue-on-error: true
      with:
        delete_release: false
        tag_name: ${{ env.BUILD_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Set build tag
      uses: anothrNick/github-tag-action@1.26.0
      continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: none
        WITH_V: false
        CUSTOM_TAG: ${{ env.BUILD_VERSION }}
        TAG_CONTEXT: branch
        RELEASE_BRANCHES: .*

  benchmarks:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Grab tool
      run: dotnet tool install dotnet-grab --global --ignore-failed-sources

    - name: Setup T4 tool
      run: dotnet tool install dotnet-t4 --global --ignore-failed-sources

    - name: Determine folders
      id: determine-folders
      run: |
        HEAD_FOLDER=$(pwd)
        HEAD_BENCH_FOLDER=$HEAD_FOLDER/tmp/benchmarks/head
        MASTER_BENCH_FOLDER=$HEAD_FOLDER/tmp/benchmarks/master
        BENCH_FOLDER=$HEAD_FOLDER/tmp/benchmarks

        echo "head_folder=$HEAD_FOLDER" >> $GITHUB_OUTPUT
        echo "head_benchmarks_folder=$HEAD_BENCH_FOLDER" >> $GITHUB_OUTPUT
        echo "master_benchmarks_folder=$MASTER_BENCH_FOLDER" >> $GITHUB_OUTPUT
        echo "benchmarks_folder=$BENCH_FOLDER" >> $GITHUB_OUTPUT

    - name: Git Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{github.event.pull_request.head.ref}}
        repository: ${{github.event.pull_request.head.repo.full_name}}

    - name: Create benchmarks results folder (HEAD)
      run: mkdir -p ${{ steps.determine-folders.outputs.head_benchmarks_folder }}

    - name: Restore dependencies (HEAD)
      run: dotnet restore rules-framework.sln

    - name: Build & Publish benchmarks (HEAD)
      run: dotnet publish -c Release tests/Rules.Framework.BenchmarkTests/Rules.Framework.BenchmarkTests.csproj -o "${{ steps.determine-folders.outputs.head_benchmarks_folder }}/bin" --framework net6.0

    - name: Change working directory (HEAD)
      run: |
        cd ${{ steps.determine-folders.outputs.head_benchmarks_folder }}
        ls -la
        ls -la bin

    - name: Run benchmarks (HEAD)
      run: sudo dotnet ./bin/Rules.Framework.BenchmarkTests.dll -a artifacts

    - name: Determine results file (HEAD)
      id: determine-results-file
      run: |
        JSON_FILE=$(find artifacts/results -name '*.json')
        echo "file=${{ steps.determine-folders.outputs.head_benchmarks_folder }}/$JSON_FILE" >> $GITHUB_OUTPUT

    - name: Change working directory (benchmarks)
      run: cd ${{ steps.determine-folders.outputs.benchmarks_folder }}

    - name: Get report dependencies
      run: grab newtonsoft.json@13.0.2

    - name: Generate report
      run: t4 -p:ResultsFile="${{ steps.determine-results-file.outputs.file }}" -P="packages/newtonsoft.json/13.0.2/lib/net6.0" -r="Newtonsoft.Json.dll" -o "report.md" "${{ steps.determine-folders.outputs.head_folder }}/tests/Rules.Framework.BenchmarkTests/Results2Markdown/Report.tt"

    - name: Publish report results
      uses: peter-evans/create-or-update-comment@v2
      with:
        issue-number: ${{ github.event.issue.number }}
        body-file: report.md